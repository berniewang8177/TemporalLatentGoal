
Random seed for training set as 2
  0%|                                                                                                             | 0/2000 [00:00<?, ?it/s]
In total, 35.096089 M # of params
get instruction path: /home/yiqiw2/experiment/language_rl/new_train_data/push_buttons+13
get instruction path: /home/yiqiw2/experiment/language_rl/new_train_data/push_buttons+1
Num ep. 200
get instruction path: /home/yiqiw2/experiment/language_rl/new_val_data/push_buttons+16
  0%|                                                                                                             | 0/2000 [00:00<?, ?it/s]/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:138: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "




























































































































































 19%|██████████████████▎                                                                                | 371/2000 [05:18<23:16,  1.17it/s]
Traceback (most recent call last):
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Scripts2/train.py", line 77, in <module>
    training(
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Train/training.py", line 138, in training
    train_losses["total"].backward()
  File "/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/_tensor.py", line 488, in backward
    torch.autograd.backward(
  File "/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/autograd/__init__.py", line 197, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt