
Random seed for training set as 2
In total, 35.096089 M # of params
get instruction path: /home/yiqiw2/experiment/language_rl/new_train_data/push_buttons+1
get instruction path: /home/yiqiw2/experiment/language_rl/new_train_data/push_buttons+10
Num ep. 200
get instruction path: /home/yiqiw2/experiment/language_rl/new_val_data/push_buttons+1
Num ep. 10
get instruction path: /home/yiqiw2/experiment/language_rl/new_val_data/push_buttons+10
Num ep. 10
  0%|                                                                                                                     | 0/2000 [00:00<?, ?it/s]/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/autograd/__init__.py:197: UserWarning: replication_pad2d_backward_cuda does not have a deterministic implementation, but you set 'torch.use_deterministic_algorithms(True, warn_only=True)'. You can file an issue at https://github.com/pytorch/pytorch/issues to help us prioritize adding deterministic support for this operation. (Triggered internally at ../aten/src/ATen/Context.cpp:82.)
  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/autograd/__init__.py:197: UserWarning: upsample_bilinear2d_backward_out_cuda does not have a deterministic implementation, but you set 'torch.use_deterministic_algorithms(True, warn_only=True)'. You can file an issue at https://github.com/pytorch/pytorch/issues to help us prioritize adding deterministic support for this operation. (Triggered internally at ../aten/src/ATen/Context.cpp:82.)
  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:138: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "

























  2%|██▋                                                                                                         | 49/2000 [00:57<38:21,  1.18s/it]
Traceback (most recent call last):
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Scripts2/train.py", line 77, in <module>
    training(
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Train/training.py", line 157, in training
    val_loss, val_logs = validating(agent, val_idx, val_loader, metrics)
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Train/validation.py", line 51, in validating
    pred = agent.model(
  File "/home/yiqiw2/miniconda3/envs/rlnlp/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Networks/models2.py", line 279, in forward
    decoded_features = self.unet_decode_film(scale.clone(), bias.clone(), vision_features.clone(), residuals, padding_mask_vision)
  File "/home/yiqiw2/experiment/language_rl/TemporalLatentGoal/Networks/models2.py", line 425, in unet_decode_film
    new_decode_feat[padding_mask_vision],
RuntimeError: CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.